//============================================================================
// 
// 邪魔物 [obstacle.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "obstacle.h"
#include "player.h"
#include "fade.h"

// Add to source as needed.
#if 1
using namespace HGSAutumn240930;
using namespace HGSAutumn240930::Collision;
using namespace HGSAutumn240930::String;
#endif

//****************************************************
// 静的メンバ変数の初期化
//****************************************************
const float CObstacle::INITSPAN = 50.0f;
const float CObstacle::SPAN_X = 300.0f;
const float CObstacle::SPAN_Y = 200.0f;

//============================================================================
// コンストラクタ
//============================================================================
CObstacle::CObstacle(int nPriority) :
	CObject_2D{ nPriority },
	m_Style{ CObstacle::STYLE::NONE },
	m_PosTarget{ 0.0f, 0.0f, 0.0f },
	m_RotTarget{ 0.0f, 0.0f, 0.0f },
	m_SizeTarget{ 0.0f, 0.0f, 0.0f },
	m_ColTarget{ 0.0f, 0.0f, 0.0f, 0.0f }
{

}

//============================================================================
// デストラクタ
//============================================================================
CObstacle::~CObstacle()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CObstacle::Init()
{
	// 基底クラスの初期設定
	HRESULT hr{ CObject_2D::Init() };

	return hr;
}

//============================================================================
// 終了処理
//============================================================================
void CObstacle::Uninit()
{
	// 基底クラスの終了処理
	CObject_2D::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CObstacle::Update()
{
	if (CFade::GetInstance()->GetNextMode() == CScene::MODE::RESULT_GAMEOVER)
	{
		return;
	}

	// 削除チェック
	DeleteCheck();

	// 当たり判定
	Collision();

	// 基底クラスの更新処理
	CObject_2D::Update();
}

//============================================================================
// 描画処理
//============================================================================
void CObstacle::Draw()
{
	// 基底クラスの描画処理
	CObject_2D::Draw();
}

//============================================================================
// 邪魔物スタイルを設定
//============================================================================
void CObstacle::SetStyle(CObstacle::STYLE Style)
{
	m_Style = Style;
}

//============================================================================
// 邪魔物スタイルを取得
//============================================================================
CObstacle::STYLE CObstacle::GetStyle()
{
	return m_Style;
}

//============================================================================
// 目標座標取得
//============================================================================
D3DXVECTOR3 CObstacle::GetPosTarget()
{
	return m_PosTarget;
}

//============================================================================
// 目標座標設定
//============================================================================
void CObstacle::SetPosTarget(D3DXVECTOR3 PosTarget)
{
	m_PosTarget = PosTarget;
}

//============================================================================
// 目標向き取得
//============================================================================
D3DXVECTOR3 CObstacle::GetRotTarget()
{
	return m_RotTarget;
}

//============================================================================
// 目標向き設定
//============================================================================
void CObstacle::SetRotTarget(D3DXVECTOR3 RotTarget)
{
	m_RotTarget = RotTarget;
}

//============================================================================
// 目標サイズ取得
//============================================================================
D3DXVECTOR3 CObstacle::GetSizeTarget()
{
	return m_SizeTarget;
}

//============================================================================
// 目標サイズ設定
//============================================================================
void CObstacle::SetSizeTarget(D3DXVECTOR3 SizeTarget)
{
	m_SizeTarget = SizeTarget;
}

//============================================================================
// 目標色取得
//============================================================================
D3DXCOLOR CObstacle::GetColTarget()
{
	return m_ColTarget;
}

//============================================================================
// 目標色設定
//============================================================================
void CObstacle::SetColTarget(D3DXCOLOR ColTarget)
{
	m_ColTarget = ColTarget;
}

//============================================================================
// 削除チェック
//============================================================================
void CObstacle::DeleteCheck()
{
	D3DXVECTOR3 Pos{ GetPos() }, Size{ GetSize() };

	if (Pos.x + Size.x < SCREEN_WIDTH * -1.0f || Pos.x - Size.x > SCREEN_WIDTH * 2.0f ||
		Pos.y + Size.y < SCREEN_HEIGHT * -1.0f || Pos.y - Size.y > SCREEN_HEIGHT * 2.0f)
	{
		// 破棄予約
		SetRelease();
	}
}

//============================================================================
// 当たり判定
//============================================================================
void CObstacle::Collision()
{
	// プレイヤータグのオブジェクトを取得
	CObject* pFind{ CObject::FindObject(CObject::TYPE::PLAYER) };

	if (!pFind)
	{
		return;
	}

	// プレイヤークラスにダウンキャスト
	CPlayer* pPlayer{ CUtility::DownCast<CPlayer, CObject>(pFind) };

	Collision::Circle circleEnemy = { D3DXVECTOR2(GetPos().x, GetPos().y), GetSize().x };
	Collision::Circle circlePlayer = { D3DXVECTOR2(pPlayer->GetPos().x, pPlayer->GetPos().y), pPlayer->GetSize().x };
	
	if (Collision::IsCollisionCircleVsCircle(circleEnemy, circlePlayer))
	{ // 衝突している
		CFade::SetFade(CScene::MODE::RESULT_GAMEOVER);
	}
}