//============================================================================
// 
// 便利関数 [utility.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "utility.h"

//****************************************************
// 静的メンバ変数の初期化
//****************************************************
CUtility* CUtility::m_pInstance = nullptr;		// 便利関数群

//============================================================================
// 初期設定
//============================================================================
HRESULT CUtility::Init()
{
	return S_OK;
}

//============================================================================
// 破棄
//============================================================================
void CUtility::Release()
{
	if (m_pInstance != nullptr)
	{
		// 終了処理
		m_pInstance->Uninit();

		// メモリ解放
		delete m_pInstance;	

		// ポインタを初期化
		m_pInstance = nullptr;
	}
}

//============================================================================
// 便利関数群を取得
//============================================================================
CUtility* CUtility::GetInstance()
{
	if (m_pInstance == nullptr)
	{
		// 生成
		m_pInstance->Create();
	}

	return m_pInstance;
}

//============================================================================
// コンストラクタ
//============================================================================
CUtility::CUtility()
{

}

//============================================================================
// デストラクタ
//============================================================================
CUtility::~CUtility()
{

}

//============================================================================
// 生成
//============================================================================
void CUtility::Create()
{
	if (m_pInstance != nullptr)
	{ // 二重生成禁止
		assert(false);
	}

	// インスタンスを生成
	m_pInstance = DBG_NEW CUtility{};
}

//============================================================================
// 終了処理
//============================================================================
void CUtility::Uninit()
{

}